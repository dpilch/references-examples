type Primary {
  id: ID!
  relatedMany(filter: ModelRelatedManyFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelRelatedManyConnection
  relatedOne: RelatedOne
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type RelatedMany {
  id: ID!
  primaryId: ID!
  primary: Primary
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type RelatedOne {
  id: ID!
  primaryId: ID!
  primary: Primary
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPrimaryConnection {
  items: [Primary]!
  nextToken: String
}

input ModelPrimaryFilterInput {
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelPrimaryFilterInput]
  or: [ModelPrimaryFilterInput]
  not: ModelPrimaryFilterInput
}

type Query {
  getPrimary(id: ID!): Primary
  listPrimaries(id: ID, filter: ModelPrimaryFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelPrimaryConnection
  getRelatedMany(id: ID!): RelatedMany
  listRelatedManies(id: ID, filter: ModelRelatedManyFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelRelatedManyConnection
  getRelatedOne(id: ID!): RelatedOne
  listRelatedOnes(id: ID, filter: ModelRelatedOneFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelRelatedOneConnection
}

input ModelPrimaryConditionInput {
  and: [ModelPrimaryConditionInput]
  or: [ModelPrimaryConditionInput]
  not: ModelPrimaryConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreatePrimaryInput {
  id: ID
}

input UpdatePrimaryInput {
  id: ID!
}

input DeletePrimaryInput {
  id: ID!
}

type Mutation {
  createPrimary(input: CreatePrimaryInput!, condition: ModelPrimaryConditionInput): Primary
  updatePrimary(input: UpdatePrimaryInput!, condition: ModelPrimaryConditionInput): Primary
  deletePrimary(input: DeletePrimaryInput!, condition: ModelPrimaryConditionInput): Primary
  createRelatedMany(input: CreateRelatedManyInput!, condition: ModelRelatedManyConditionInput): RelatedMany
  updateRelatedMany(input: UpdateRelatedManyInput!, condition: ModelRelatedManyConditionInput): RelatedMany
  deleteRelatedMany(input: DeleteRelatedManyInput!, condition: ModelRelatedManyConditionInput): RelatedMany
  createRelatedOne(input: CreateRelatedOneInput!, condition: ModelRelatedOneConditionInput): RelatedOne
  updateRelatedOne(input: UpdateRelatedOneInput!, condition: ModelRelatedOneConditionInput): RelatedOne
  deleteRelatedOne(input: DeleteRelatedOneInput!, condition: ModelRelatedOneConditionInput): RelatedOne
}

input ModelSubscriptionPrimaryFilterInput {
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionPrimaryFilterInput]
  or: [ModelSubscriptionPrimaryFilterInput]
}

type Subscription {
  onCreatePrimary(filter: ModelSubscriptionPrimaryFilterInput): Primary @aws_subscribe(mutations: ["createPrimary"])
  onUpdatePrimary(filter: ModelSubscriptionPrimaryFilterInput): Primary @aws_subscribe(mutations: ["updatePrimary"])
  onDeletePrimary(filter: ModelSubscriptionPrimaryFilterInput): Primary @aws_subscribe(mutations: ["deletePrimary"])
  onCreateRelatedMany(filter: ModelSubscriptionRelatedManyFilterInput): RelatedMany @aws_subscribe(mutations: ["createRelatedMany"])
  onUpdateRelatedMany(filter: ModelSubscriptionRelatedManyFilterInput): RelatedMany @aws_subscribe(mutations: ["updateRelatedMany"])
  onDeleteRelatedMany(filter: ModelSubscriptionRelatedManyFilterInput): RelatedMany @aws_subscribe(mutations: ["deleteRelatedMany"])
  onCreateRelatedOne(filter: ModelSubscriptionRelatedOneFilterInput): RelatedOne @aws_subscribe(mutations: ["createRelatedOne"])
  onUpdateRelatedOne(filter: ModelSubscriptionRelatedOneFilterInput): RelatedOne @aws_subscribe(mutations: ["updateRelatedOne"])
  onDeleteRelatedOne(filter: ModelSubscriptionRelatedOneFilterInput): RelatedOne @aws_subscribe(mutations: ["deleteRelatedOne"])
}

type ModelRelatedManyConnection {
  items: [RelatedMany]!
  nextToken: String
}

input ModelRelatedManyFilterInput {
  id: ModelIDInput
  primaryId: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelRelatedManyFilterInput]
  or: [ModelRelatedManyFilterInput]
  not: ModelRelatedManyFilterInput
}

input ModelRelatedManyConditionInput {
  primaryId: ModelIDInput
  and: [ModelRelatedManyConditionInput]
  or: [ModelRelatedManyConditionInput]
  not: ModelRelatedManyConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateRelatedManyInput {
  id: ID
  primaryId: ID!
}

input UpdateRelatedManyInput {
  id: ID!
  primaryId: ID
}

input DeleteRelatedManyInput {
  id: ID!
}

input ModelSubscriptionRelatedManyFilterInput {
  id: ModelSubscriptionIDInput
  primaryId: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionRelatedManyFilterInput]
  or: [ModelSubscriptionRelatedManyFilterInput]
}

type ModelRelatedOneConnection {
  items: [RelatedOne]!
  nextToken: String
}

input ModelRelatedOneFilterInput {
  id: ModelIDInput
  primaryId: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelRelatedOneFilterInput]
  or: [ModelRelatedOneFilterInput]
  not: ModelRelatedOneFilterInput
}

input ModelRelatedOneConditionInput {
  primaryId: ModelIDInput
  and: [ModelRelatedOneConditionInput]
  or: [ModelRelatedOneConditionInput]
  not: ModelRelatedOneConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateRelatedOneInput {
  id: ID
  primaryId: ID!
}

input UpdateRelatedOneInput {
  id: ID!
  primaryId: ID
}

input DeleteRelatedOneInput {
  id: ID!
}

input ModelSubscriptionRelatedOneFilterInput {
  id: ModelSubscriptionIDInput
  primaryId: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionRelatedOneFilterInput]
  or: [ModelSubscriptionRelatedOneFilterInput]
}
